#include <chrono>
#include <iostream>
#include <ctime>

using namespace std;

void bsort(int* arr, int n) { 

	auto start_time = std::chrono::steady_clock::now();
	int i, j, q;
	for (i = 0; i < n - 1; i++) { //цикл for
		for (j = 0; j < n - i - 1; j++) { //цикл for
			if (arr[j] > arr[j + 1]) { //Условие
				q = arr[j]; //меняем местами элементы массива
				arr[j] = arr[j + 1];
				arr[j + 1] = q;

			}

		}

	}

	auto end_time = std::chrono::steady_clock::now();
	auto search_time = std::chrono::duration_cast<std::chrono::milliseconds>(start_time - end_time);
	std::cout << search_time.count() << " \n";//вывод времени сортировки

}
int main() {
	for (int n = 1000; n <= 100000; n += 100) {
		int* arr = new int[n];
		for (int i = 0; i < n; i++) {
			arr[i] = rand() % 100;
		}

		bsort(arr, n);

	}


	return 0;
}




#include <chrono>
#include <iostream>
#include <ctime>

using namespace std;

void Raschsort(int* arr, int n) { 

	auto start_time = std::chrono::steady_clock::now();
	int i, temp, step;
	float k = 1.247;
	for (step = n - 1; step >= 1; step /= k) {
		for (i = 0; i < n - step; i++) {
			if (arr[i] > arr[i + step]) {
				temp = arr[i]; //меняем местами элементы массива
				arr[i] = arr[i + step];
				arr[i + step] = temp;
			}
		}
	}

	auto end_time = std::chrono::steady_clock::now();
	auto search_time = std::chrono::duration_cast<std::chrono::milliseconds>(start_time - end_time);
	std::cout << search_time.count() << " \n";//вывод времени сортировки

}
int main() {
	for (int n = 1000; n <= 100000; n += 100) {
		int* arr = new int[n];
		for (int i = 0; i < n; i++) {
			arr[i] = rand() % 100;
		}

		Raschsort(arr, n);

	}


	return 0;
}


#include <chrono>
#include <iostream>
#include <ctime>

using namespace std;

void vstsort(int* arr, int n) { 

	auto start_time = std::chrono::steady_clock::now();
	int i, j, x;
	for (i = 1; i < n; i++) {
		for (j = i, x = arr[i]; (j > 0) && (arr[j - 1] > x); j--) {
			arr[j] = arr[j - 1];
		}
		arr[j] = x;
	}


	auto end_time = std::chrono::steady_clock::now();
	auto search_time = std::chrono::duration_cast<std::chrono::milliseconds>(start_time - end_time);
	std::cout << search_time.count() << " \n";//вывод времени сортировки

}
int main() {
	for (int n = 1000; n <= 100000; n += 100) {
		int* arr = new int[n];
		for (int i = 0; i < n; i++) {
			arr[i] = rand() % 100;
		}

		vstsort(arr, n);

	}


	return 0;
}


#include <chrono>
#include <iostream>
#include <ctime>

using namespace std;

void shellsort(int* arr, int n) { 

	auto start_time = std::chrono::steady_clock::now();
	int i, x, d, j;
	for (d = n/ 2; d > 0; d /= 2) {
		for (i = d; i < n; i++) {
			x = arr[i];
			for (j = i; j >= d; j -= d) {
				if (x < arr[j - d])
					arr[j] = arr[j - d];
				else break;
			}
			arr[j] = x;
		}
	}


	auto end_time = std::chrono::steady_clock::now();
	auto search_time = std::chrono::duration_cast<std::chrono::milliseconds>(start_time - end_time);
	std::cout << search_time.count() << " \n";//вывод времени сортировки

}
int main() {
	for (int n = 1000; n <= 100000; n += 100) {
		int* arr = new int[n];
		for (int i = 0; i < n; i++) {
			arr[i] = rand() % 100;
		}

		shellsort(arr, n);

	}


	return 0;
}



#include <chrono>
#include <iostream>
#include <ctime>

using namespace std;

void viborsort(int* arr, int n) { 

	auto start_time = std::chrono::steady_clock::now();
	int i, j, min, buf;
	for (i = 0; i < n - 1; i++) {
		for (j = i + 1, min = i; j < n; j++) {
			if (arr[j] < arr[min]) {
				min = j;
			}
		}
		buf = arr[i];
		arr[i] = arr[min];
		arr[min] = buf;
	}


	auto end_time = std::chrono::steady_clock::now();
	auto search_time = std::chrono::duration_cast<std::chrono::milliseconds>(start_time - end_time);
	std::cout << search_time.count() << " \n";//вывод времени сортировки

}
int main() {
	for (int n = 1000; n <= 100000; n += 100) {
		int* arr = new int[n];
		for (int i = 0; i < n; i++) {
			arr[i] = rand() % 100;
		}

		viborsort(arr, n);

	}


	return 0;
}



#include <chrono>
#include <iostream>
#include <ctime>

using namespace std;

void gnomsort(int* arr, int n) { 

	auto start_time = std::chrono::steady_clock::now();
		int i = 1, j = 2, buf;
		while (i < n) {
			if (arr[i - 1] > arr[i]) {
				buf = arr[i];
				arr[i] = arr[i - 1];
				arr[i - 1] = buf;
				i--;
				if (i > 0) continue;
			}
			i = j++;
		}



	auto end_time = std::chrono::steady_clock::now();
	auto search_time = std::chrono::duration_cast<std::chrono::milliseconds>(start_time - end_time);
	std::cout << search_time.count() << " \n";//вывод времени сортировки

}
int main() {
	for (int n = 1000; n <= 100000; n += 100) {
		int* arr = new int[n];
		for (int i = 0; i < n; i++) {
			arr[i] = rand() % 100;
		}

		gnomsort(arr, n);

	}


	return 0;
}


#include <chrono>
#include <iostream>
#include <ctime>

using namespace std;

void qsort(int* arr, int b, int e) {
	int buf, l = b, r = e, piv = arr[(b + e) / 2];
	for (int i = b; i < e; i++) {
		while (arr[l] < piv)
			l++;
		while (arr[r] > piv)
			r--;
		if (l <= r) {
			int t = arr[l];
			arr[l] = arr[r];
			arr[r] = t;
			l++;
			r--;

		}
	} if (b < e) {
		qsort(arr, b, r);
		qsort(arr, l, e);
	}

void qqsort(int* arr, int n) { 

	auto start_time = std::chrono::steady_clock::now();
		qsort(arr, 0, n - 1);



	auto end_time = std::chrono::steady_clock::now();
	auto search_time = std::chrono::duration_cast<std::chrono::milliseconds>(start_time - end_time);
	std::cout << search_time.count() << " \n";//вывод времени сортировки

}
int main() {
	for (int n = 1000; n <= 100000; n += 100) {
		int* arr = new int[n];
		for (int i = 0; i < n; i++) {
			arr[i] = rand() % 100;
		}

		qqsort(arr, n);

	}


	return 0;
}
