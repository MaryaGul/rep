#include <iostream>//6
using namespace std;

class timee
{
private:
	int hours, minutes, seconds;
public:
	timee() : hours(0), minutes(0), seconds(0)
	{  }
	timee(int h, int m, int s) : hours(h), minutes(m), seconds(s)
	{  }
	void vivod()
	{
		cout<<hours << ":" << minutes << ":" << seconds<<endl;
	}
	
	timee operator++()
	{
		if (++seconds > 59)
		{
			seconds -= 60;
			minutes++;}
			
		if (minutes > 59)
		{	minutes -= 60;
			hours++; }
	
		return *this;
	}
    timee operator--()
	{
		if (--seconds < 0)
		{
			seconds += 60; 
			minutes--;
		}
		if (minutes < 0)
		{
			minutes += 60; 
			hours--;
		}
		return *this;
	}
	timee operator++(int)
	{
		timee temp(hours, minutes, seconds);
		++(*this);
		return temp;
	}
	timee operator--(int)
	{
		timee temp(hours, minutes, seconds);
		--(*this);
		return temp;
	}
};

int main()
{
	timee time1(3, 59, 59);
	cout << "Исходное время: "; time1.vivod();
	cout << "Время++: "; time1++.vivod();
	cout << "Время: "; time1.vivod();
	cout << "++время: "; (++time1).vivod();
	cout << endl;
	cout << "Исходное время: "; time1.vivod();
	cout << "время--: "; time1--.vivod();
	cout << "Время: "; time1.vivod();
	cout << "--время: "; (--time1).vivod();
	cout << endl;
	return 0;
}


#include <iostream>//7
using namespace std;

class timee
{
private:
	int hours, minutess, secondss;
public:
	timee() : hours(0), minutess(0), secondss(0)
	{  }
	timee(int h, int m, int s) : hours(h), minutess(m), secondss(s)
	{  }
	void vivod()
	{
		cout << hours << ":" << minutess << ":" << secondss<<endl;
	}
	timee operator+(timee t2)
	{
		int s = secondss + t2.secondss;
		int m = minutess + t2.minutess;
		int h = hours + t2.hours;
		if (s > 59)
		{
			s -= 60; m++;
		}
		if (m > 59)
		{
			m -= 60; h++;
		}
		return timee(h, m, s);
	}
	timee operator-(timee t2)
	{
		int s = secondss - t2.secondss;
		int m = minutess - t2.minutess;
		int h = hours - t2.hours;
		if (s < 0)
		{
			s += 60; m--;
		}
		if (m < 0)
		{
			m += 60; h--;
		}
		return h < 0 ? timee() : timee(h, m, s);
	}
	timee operator*(float mul)
	{
		int s = secondss * mul;
		int m = minutess * mul;
		int h = hours * mul;
		if (s > 59)
		{
			s %= 60; m += s / 60;
		}
		if (m > 59)
		{
			m %= 60; h += m / 60;
		}
		return timee(h, m, s);
	}
timee operator++()
	{
		if (++secondss > 59)
		{
			secondss -= 60;
			minutess++;
		}
		if (minutess > 59)
		{
			minutess -= 60;
			hours++;
		}
		return *this;
	}
	timee operator--()
	{
		if (--secondss < 0)
		{
			secondss += 60; 
			minutess--;
		}
		if (minutess < 0)
		{
			minutess += 60; 
			hours--;
		}
		return *this;
	}
	timee operator++(int)
	{
		timee temp(hours, minutess, secondss);
		++(*this);
		return temp;
	}
	timee operator--(int)
	{
		timee temp(hours, minutess, secondss);
		--(*this);
		return temp;
	}
};

int main()
{
	timee time1(7, 40, 59);
	timee time2(2, 11, 20);
	cout << "Время1:   "; time1.vivod();
	cout << "Время2:   "; time2.vivod();
	cout << "Время1-время2:   "; (time1-time2).vivod();
	cout << "Время1*6.7:   "; (time1 * 6.7).vivod();
	cout << endl;
	return 0;
}


#include <iostream>//7  
#include <cmath>
using namespace std;
class Fraction
{
 private:
  int numerator, denominator;
 public:
  Fraction():numerator(0), denominator(0)
  {}
  Fraction (int num, int denom) : numerator(num), denominator(denom)
  {}
  void vvodf()
  {
   char simb;
   cout << "Введите дробь" << endl;
   cin >> numerator >> simb>> denominator;
   
  }
    bool operator==(Fraction f)
	{
		return numerator == f.numerator && denominator == f.denominator;
	}
	bool operator!=(Fraction f)
	{
		return numerator != f.numerator || denominator != f.denominator;
	}

  Fraction operator + (Fraction f2)
  {
   int num = numerator * f2.denominator + denominator * f2.numerator;
   int denom = denominator * f2.denominator;
   return Fraction(num, denom);
  }
  Fraction operator - (Fraction f2)
  {
   int num = numerator * f2.denominator - denominator * f2.numerator;
   int denom = denominator * f2.denominator; 
   return Fraction(num, denom);
  }
  Fraction operator * (Fraction f2)
  {
   int num = numerator * f2.denominator;
   int denom = denominator * f2.denominator;
   return Fraction(num, denom);
  }
  Fraction operator / (Fraction f2)
  {
   int num = numerator * f2.denominator;
   int denom = denominator * f2.numerator;
   return Fraction(num, denom);
  }
  void lowterms ()
  {
   long tnum, tden, temp, gcd;
   tnum = labs(numerator);           
   tden = labs(denominator);            
   if( tden == 0 )              
     { cout << "Недопустимый знаменатель!"; exit(1); }
   else if( tnum == 0 )         
     { numerator=0; denominator = 1; return; }
   while(tnum !=0)
   {
     if( tnum < tden )          
       { temp=tnum; tnum=tden; tden=temp; } 
     tnum = tnum - tden;       
   }
   gcd = tden;                  
   numerator = numerator / gcd;            
   denominator = denominator / gcd;
  }
  void vivod()
  { cout<<"Ответ:" << numerator << "/" << denominator << endl; }
};
int main()
{
  cout<<"Task 7"<<endl;  
 char let;
 do
 {
  Fraction fr1, fr2, frez;
  fr1.vvodf();
  cout << "Введите операцию" << endl; cin >> let;
  fr2.vvodf();
  
  switch (let)
  {
   case '+': frez = fr1 + fr2; break;
   case '-': frez = fr1 - fr2; break;
   case '*': frez = fr1 * fr2; break;
   case '/': frez = fr1 / fr2; break;
   default: cout<<"Такой операции нет! "<<endl; 
  }
  frez.lowterms();
  frez.vivod();
  cout << "Желаете продолжить? (y/n)" << endl; cin >> let;
 }
 while (let == 'y');
 return 0;
}



#include<iostream>//8
#include <string>
#include <stdlib.h>
#include <iomanip>
using namespace std;
class bMoney
{
private:
    string strMon;
    long double number;
 
public:
 bMoney() : number(0)
 {}
 bMoney(long double num)
 {
  number = num;
 }
 operator long double () 
 {
  long double num = number;
  return num;
 }
    void mstold()
    {
        cout << "Введите денежную сумму и знак доллара" << endl;
        getline(cin, strMon, '$');

        int wlen = strMon.length();
        int n=0;
        string num;

        for (int j = 0; j < wlen; j++)
   if (strMon[j] != ',' && strMon[j] != '$')
                num.push_back(strMon[j]); ;
        number = stold(num);  
 }
 bMoney operator + ( bMoney mon2)
 {
  return number + mon2.number;
 }
 bMoney operator - ( bMoney mon2)
 {
  return number - mon2.number;
 }
 bMoney operator * ( long double mon2)
 {
  return number * mon2;
 }
 bMoney operator / ( bMoney mon2)
 {
  return number / mon2.number;
 }
 bMoney operator / ( long double mon2)
 {
  return number / mon2;
 }
    void vivod()const
    {
        cout << setiosflags (ios::fixed)
   << setiosflags (ios::showpoint)
   <<setprecision(2)
   << "\n" << number << '$' << endl;
    }
};

int main()
{
    cout<<"Task 8"<<endl;
    bMoney money1, money2, moneysum;
  long double num = 0;
 do
 {
  money1.mstold();
  money2.mstold();
  cout<<"Суммма денежных сумм"; moneysum = money1 + money2; moneysum.vivod();
  cout<<"Разность денежных сумм";moneysum = money1 - money2; moneysum.vivod();
  num = money2;
  cout<<"Умноженная";moneysum = money1 * num; moneysum.vivod();
  cout<<"Деление суммы на сумму"; moneysum = money1 / money2; moneysum.vivod();
  cout<<"Деленная";moneysum = money1 / num; moneysum.vivod();
  cout << "Вы желаете продолжить?" << endl;
  cin.get();
 }
 while (cin.get() !='n');
  
    return 0;
}



#include <iostream>//9
using namespace std;
const int LIMIT = 100;

class safearray
{
private:
 int arr[LIMIT];
public:
 
 int& operator[](int n)
 {
  if(n < 0 || n >= LIMIT)
  {
   cout << "Ошибочный индекс!"; exit(1);
  }
  return arr[n];
 }
};

int main()
{
    cout<<"Task 9"<<endl;
 safearray sa1;
 int up, down, down2, differ=0;
 cout << "Введите верхнюю границу массива" << endl; cin >> up;
 cout << "Введите нижнюю границу массива" << endl; cin >> down;
 differ = up - 100;
 down2 = down;
 for(int i = down-differ; i < up-differ; i++)
  sa1[i] = (down2++) * 10;  

 for( int i = down-differ; i < up-differ; i++)
 {
  int temp = sa1[i];  
  cout << "Элемент " << down++  << " равен " << temp << endl;
 }

 return 0;
}




#include<iostream>//10
#include <string>
#include <stdlib.h>
#include <iomanip>
#include <cmath>
using namespace std;

class Cartesian;
class Polar;

class Polar
{
private:
  double corner;
  double radius;
public:
    Polar() : corner(0), radius (0)
    {}
    Polar (double cor, double rad) : corner(cor), radius(rad)
    {}
    Polar (const Cartesian& cartes);
    void get ()
    {
        cout << "Введите угол(полярные координаты): " << endl;
        cin >> corner;
        if (corner < 0)
            if (corner > 360)
                exit(1);
        cout << "Введите радиус: " << endl;
        cin >> radius;
    }
    void vivod() const
    {
        cout << "Результат: " << endl
            << "угол: " << corner << endl
            << "угол: " << radius << endl;
    }
    double vvodc() const
    {return corner; }
    double vvodr () const
    {return radius; }
};

class Cartesian
{
private:
    double X;
    double Y;
public:
    Cartesian() : X(0), Y(0)
    {}
    Cartesian (double x, double y) : X(x), Y(y)
    {}
    Cartesian (const Polar& pol);
    Cartesian operator + (Cartesian coord2)
    {
        double tempY = Y + coord2.Y;
        double tempX = X + coord2.X;
        return Cartesian( tempX, tempY);
    }
    double get_X () const
    { return X;}
    double get_Y () const
    {return Y;}
};

Cartesian::Cartesian(const Polar& pol)
{
    double cor = pol.vvodc();
    double rad = pol.vvodr();
    X = rad * cos(cor);
    Y = rad * sin(cor);
}

Polar::Polar(const Cartesian& cartes)
{
    double x = cartes.get_X();
    double y = cartes.get_Y();
    corner = tan(y/x);
    radius = hypot(x, y);
}

int main()
{
    cout<<"Task 10"<<endl;
    Polar coordinate1, coordinate2, result_coordinate;
    Cartesian coord1, coord2, result_coord;
    coordinate1.get();
    coordinate2.get();
    coord1 = coordinate1;
    coord2 = coordinate2;
    result_coord = coord1 + coord2;
    result_coordinate = result_coord;
    result_coordinate.vivod();

    return 0;
}
