#include <iostream>//6
using namespace std;

class timee
{
private:
	int hours, minutes, seconds;
public:
	timee() : hours(0), minutes(0), seconds(0)
	{  }
	timee(int h, int m, int s) : hours(h), minutes(m), seconds(s)
	{  }
	void vivod()
	{
		cout<<hours << ":" << minutes << ":" << seconds<<endl;
	}
	
	timee operator++()
	{
		if (++seconds > 59)
		{
			seconds -= 60;
			minutes++;}
			
		if (minutes > 59)
		{	minutes -= 60;
			hours++; }
	
		return *this;
	}
    timee operator--()
	{
		if (--seconds < 0)
		{
			seconds += 60; 
			minutes--;
		}
		if (minutes < 0)
		{
			minutes += 60; 
			hours--;
		}
		return *this;
	}
	timee operator++(int)
	{
		timee temp(hours, minutes, seconds);
		++(*this);
		return temp;
	}
	timee operator--(int)
	{
		timee temp(hours, minutes, seconds);
		--(*this);
		return temp;
	}
};

int main()
{
	timee time1(3, 59, 59);
	cout << "Исходное время: "; time1.vivod();
	cout << "Время++: "; time1++.vivod();
	cout << "Время: "; time1.vivod();
	cout << "++время: "; (++time1).vivod();
	cout << endl;
	cout << "Исходное время: "; time1.vivod();
	cout << "время--: "; time1--.vivod();
	cout << "Время: "; time1.vivod();
	cout << "--время: "; (--time1).vivod();
	cout << endl;
	return 0;
}


#include <iostream>//7
using namespace std;

class timee
{
private:
	int hours, minutess, secondss;
public:
	timee() : hours(0), minutess(0), secondss(0)
	{  }
	timee(int h, int m, int s) : hours(h), minutess(m), secondss(s)
	{  }
	void vivod()
	{
		cout << hours << ":" << minutess << ":" << secondss<<endl;
	}
	timee operator+(timee t2)
	{
		int s = secondss + t2.secondss;
		int m = minutess + t2.minutess;
		int h = hours + t2.hours;
		if (s > 59)
		{
			s -= 60; m++;
		}
		if (m > 59)
		{
			m -= 60; h++;
		}
		return timee(h, m, s);
	}
	timee operator-(timee t2)
	{
		int s = secondss - t2.secondss;
		int m = minutess - t2.minutess;
		int h = hours - t2.hours;
		if (s < 0)
		{
			s += 60; m--;
		}
		if (m < 0)
		{
			m += 60; h--;
		}
		return h < 0 ? timee() : timee(h, m, s);
	}
	timee operator*(float mul)
	{
		int s = secondss * mul;
		int m = minutess * mul;
		int h = hours * mul;
		if (s > 59)
		{
			s %= 60; m += s / 60;
		}
		if (m > 59)
		{
			m %= 60; h += m / 60;
		}
		return timee(h, m, s);
	}
timee operator++()
	{
		if (++secondss > 59)
		{
			secondss -= 60;
			minutess++;
		}
		if (minutess > 59)
		{
			minutess -= 60;
			hours++;
		}
		return *this;
	}
	timee operator--()
	{
		if (--secondss < 0)
		{
			secondss += 60; 
			minutess--;
		}
		if (minutess < 0)
		{
			minutess += 60; 
			hours--;
		}
		return *this;
	}
	timee operator++(int)
	{
		timee temp(hours, minutess, secondss);
		++(*this);
		return temp;
	}
	timee operator--(int)
	{
		timee temp(hours, minutess, secondss);
		--(*this);
		return temp;
	}
};

int main()
{
	timee time1(7, 40, 59);
	timee time2(2, 11, 20);
	cout << "Время1:   "; time1.vivod();
	cout << "Время2:   "; time2.vivod();
	cout << "Время1-время2:   "; (time1-time2).vivod();
	cout << "Время1*6.7:   "; (time1 * 6.7).vivod();
	cout << endl;
	return 0;
}


#include <iostream>//7  
#include <cmath>
using namespace std;
class Fraction
{
 private:
  int numerator, denominator;
 public:
  Fraction():numerator(0), denominator(0)
  {}
  Fraction (int num, int denom) : numerator(num), denominator(denom)
  {}
  void vvodf()
  {
   char simb;
   cout << "Введите дробь" << endl;
   cin >> numerator >> simb>> denominator;
   
  }
    bool operator==(Fraction f)
	{
		return numerator == f.numerator && denominator == f.denominator;
	}
	bool operator!=(Fraction f)
	{
		return numerator != f.numerator || denominator != f.denominator;
	}

  Fraction operator + (Fraction f2)
  {
   int num = numerator * f2.denominator + denominator * f2.numerator;
   int denom = denominator * f2.denominator;
   return Fraction(num, denom);
  }
  Fraction operator - (Fraction f2)
  {
   int num = numerator * f2.denominator - denominator * f2.numerator;
   int denom = denominator * f2.denominator; 
   return Fraction(num, denom);
  }
  Fraction operator * (Fraction f2)
  {
   int num = numerator * f2.denominator;
   int denom = denominator * f2.denominator;
   return Fraction(num, denom);
  }
  Fraction operator / (Fraction f2)
  {
   int num = numerator * f2.denominator;
   int denom = denominator * f2.numerator;
   return Fraction(num, denom);
  }
  void lowterms ()
  {
   long tnum, tden, temp, gcd;
   tnum = labs(numerator);           
   tden = labs(denominator);            
   if( tden == 0 )              
     { cout << "Недопустимый знаменатель!"; exit(1); }
   else if( tnum == 0 )         
     { numerator=0; denominator = 1; return; }
   while(tnum !=0)
   {
     if( tnum < tden )          
       { temp=tnum; tnum=tden; tden=temp; } 
     tnum = tnum - tden;       
   }
   gcd = tden;                  
   numerator = numerator / gcd;            
   denominator = denominator / gcd;
  }
  void vivod()
  { cout<<"Ответ:" << numerator << "/" << denominator << endl; }
};
int main()
{
  cout<<"Task 7"<<endl;  
 char let;
 do
 {
  Fraction fr1, fr2, frez;
  fr1.vvodf();
  cout << "Введите операцию" << endl; cin >> let;
  fr2.vvodf();
  
  switch (let)
  {
   case '+': frez = fr1 + fr2; break;
   case '-': frez = fr1 - fr2; break;
   case '*': frez = fr1 * fr2; break;
   case '/': frez = fr1 / fr2; break;
   default: cout<<"Такой операции нет! "<<endl; 
  }
  frez.lowterms();
  frez.vivod();
  cout << "Желаете продолжить? (y/n)" << endl; cin >> let;
 }
 while (let == 'y');
 return 0;
}

