#include <iostream>//4
using namespace std;

int maxint(int arr[], int n)
{
	int max = 0;
	for (int i = 1; i < n; i++)
		if (arr[i] > arr[max]) 
		    max = i;
	return max;
}

int main()
{
	cout<<"Task 4"<<endl;
	int N, arr[N];
	cout<<"Введите размер массива:";
	cin>>N;
	cout<<"Введите элменты массива: ";
	for(int j =0; j < N; j++){;
	    cin>>arr[j];
	}
	int max = maxint(arr, N);
	cout<<"Максимальное значение: "<< arr[max];
	return 0;
}


#include <iostream>//5  
#include <cmath>
using namespace std;
class Fraction
{
 private:
  int numerator, denominator;
 public:
  Fraction():numerator(), denominator()
  {}
  void get_fr() //метод получания дроби
  {
   char simb;
   cout<<"Введите желаемую дробь: "<<endl;
   cin>>numerator>>simb>>denominator;
  }
  void add_fr(Fraction f1, Fraction f2) //метод сложения двух дробей
  {
   numerator = f1.numerator * f2.denominator + f1.denominator * f2.numerator;
   denominator = f1.denominator * f2.denominator;
  }
  void mul_fr (Fraction f1, int n) //метод деления суммы дробей на количество их самих (умножение знаменателя на это число)
  {
   denominator = f1.denominator * n;
  }

  void lowterms () //метод сокращения дроби
  {
   long tnum, tden, temp, gcd;
   tnum = labs(numerator);            // используем неотрицательные
   tden = labs(denominator);            // значения (нужен cmath)
   if( tden == 0 )              // проверка знаменателя на 0
     { cout << "Недопустимый знаменатель!"; exit(1); }
   else if( tnum == 0 )         // проверка числителя на 0
     { numerator=0; denominator = 1; return; }
// нахождение наибольшего общего делителя
   while(tnum !=0)
   {
     if( tnum < tden )          // если числитель больше знаменателя,
       { temp=tnum; tnum=tden; tden=temp; } //меняем их местами
     tnum = tnum - tden;        // вычитание
   }
   gcd = tden;                  // делим числитель и знаменатель на
   numerator = numerator / gcd;             // полученный наибольший общий делитель
   denominator = denominator / gcd;
  }
  void disp_fr()
  { cout << "Среднее арифмитическое этих дробей " << numerator << "/" << denominator << endl; }
};
int main()
{
 int n;
 Fraction array[n];
 Fraction tempsum, sum;
 cout<<"Введите кол-во дробей, среднее арифмитическое которых вы хотите найти: ";
 cin>>n;
 for (int i = 0; i <n; i++){
    array[i].get_fr(); 
 }
 for (int j = 0; j<n; j++) //сложение дробей
 {
  tempsum.add_fr(array[j], array[j++]);
  j++;
  sum.add_fr(tempsum, sum);
 }
 sum.mul_fr(sum, n); //деление на их кол-во
 sum.disp_fr();  //вывод на экран
 return 0;
}

#include  <iostream>//6
#include  <cstdlib>
#include <ctime>
using namespace std;
enum Suit { clubs, diamonds, hearts, spades };
const int   jack = 11;
const int queen = 12;
const int king = 13;
const int ace = 14;
class card
{
private:
	int number;
	Suit suit;
public:card()
{ }
	   void set(int n, Suit s)
	   {
		   suit = s; number = n;
	   }
	   void display();
};
void card::display()
{
	if (number >= 2 && number <= 10)
		cout << number;
	else
	{
		switch (number)
		{
		case jack: cout << 'J'; break;
		case queen: cout << 'Q'; break;
		case king: cout << 'K'; break;
		case ace: cout << 'A'; break;
		}
	}
	switch (suit)
	{
	case clubs: cout << static_cast<char>(5); break;
	case diamonds: cout << static_cast<char>(4); break;
	case hearts: cout << static_cast<char>(3); break;
	case spades: cout << static_cast<char>(6); break;
	}
}

int main()
{
	cout<<"Task 6"<<endl;;
	card deck[52];
	int j;
	cout << endl;
	for (j = 0; j < 52; j++)
	{
		int num = (j % 13) + 2;
		Suit su = Suit(j / 13);
		deck[j].set(num, su);
	}
	cout << "Изначальная колода: "<<endl;
	for (j = 0; j < 52; j++)
	{
		deck[j].display();
		cout << "  ";
		if (!((j + 1) % 13))
			cout << endl;
	} 
	srand(time(NULL));
	for (j = 0; j < 52; j++)
	{
		int k = rand() % 52;
		card temp = deck[j];
		deck[j] = deck[k];
		deck[k] = temp;
	}
	card newdesk[4][13];	
	for (int i = 0, j = 0; j < 52; j++)
	{
		int buf = (j + 1) % 13;
		newdesk[i][buf] = deck[j];
		if (!buf) i++;
	}
	cout << "Перемешанная колода:"<<endl;
	for (int i = 0; i < 4; i++)
	{
		cout << "Колода №" << (i + 1) << ":\n";
		for (card c : newdesk[i])
		{
			c.display();
			cout << ' ';
		}
		cout << endl;
	}

	return 0;
}

#include  <iostream>//7
#include <string>
using namespace std;

class money
{
private:
string smon;
	long double sum;
public:
	long double mstold(string sum)
	{
       string res = "";
		for (int i = 0; i < sum.length(); i++)
		{
			if (isdigit(sum[i]) || sum[i] == ',') 
				res += sum[i];
		}
		return stold(res.c_str());
	}
};

int main()
{
	cout<<"Task 7"<<endl;;
	money mon;
	string str;
	char let;
	do
	{
		cout<<"Введите сумму(знак доллара в начале): ";
		cin>>str;
		cout<<"В виде long double: "<<mon.mstold(str)<<endl;
		cout<<"Вы желаете родолжить(y/n)? ";
		cin>>let;
	}
	while (let == 'y');
	return 0;
}

#include<iostream>//8
using namespace std;

const int LIMIT = 100;

class Safearay
{
private:
 int array[LIMIT];
public:
 void putel(int n, int temp)
 {
  if (n<0 || n>LIMIT-1)
  {
   cout << "Переполнение массива" << endl;;

   exit(1);
  }
  array[n] = temp;
 }
 int getel(int n)
 {
  if (n<0||n>LIMIT-1)
  {
   cout << "Переполнение массива" << endl;;
   exit(1);
  }
  return array[n];
 }
};
int main()
{
    cout<<"Task 8"<<endl;
   Safearay sal;
   int temp = 12345;
   sal.putel (7, temp);
   temp = sal.getel (7);
   cout <<"Присвоено "<< temp << endl;
    return 0;
}


#include <iostream>//9
using namespace std;

class Queue
{
private:
    enum { MAX = 10 }; 
    int st[MAX];      
    int head;
    int tail;         
public:

    Queue()           
    {

       head = tail = 0;
    }
    void put(int var)
    {
        st[tail++] = var;
        if(head > 0) head--;

    }
    int get()        
    {
        if(tail > 0)tail--;
        return st[head++];

    }
};

int main()
{
    Queue s1;

    s1.put(11);
    s1.put(22);
    cout << "1: " <<"Элемент из очереди:"<< s1.get() << endl;
    cout << "2: " << "Элемент из очереди:"<<s1.get() << endl;

    s1.put(33);
    s1.put(44);
    s1.put(55);
    s1.put(66);
    cout << "3: " << "Элемент из очереди:"<<s1.get() << endl;
    cout << "4: " <<"Элемент из очереди:"<< s1.get() << endl;
    cout << "5: " <<"Элемент из очереди:"<< s1.get() << endl;
    cout << "6: " <<"Элемент из очереди:"<< s1.get() << endl;
    cin.get();
    return 0;
}

#include<iostream>//10
using namespace std;

const int LIMIT = 10;

class Matrix
{
private:
 int array [10] [10];

public:
 int rows, colums;
 Matrix(int r, int k) :  rows(r), colums(k)
  {}

 void putel(int r, int k, int temp)
 {
  if (r<0 || r>LIMIT-1 || k<0 || k>LIMIT-1)
  {
   cout << "Переполнение массива:" << endl;;
   exit(1);
  }
  array[r][k] = temp;
 }
 int getel(int r, int k)
 {
  if (r<0 || r>LIMIT-1 || k<0 || k>LIMIT-1)
  {
   cout << "Переполнение массива:" << endl;;
   exit(1);
  }
  return array[r][k];
 }
};
int main()
{
    cout<<"Task 10"<<endl;
    Matrix m1 (3,4);
    int temp = 12345;
    m1.putel (7, 4, temp);
    temp = m1.getel (7, 4);
    cout <<"Элемент "<< temp << endl;

    return 0;
}


#include  <iostream>//11
#include <string>
#include <sstream>
using namespace std;

class money
{
private:
	long double _sum;
public:
	string ldtoms(long double sum)
	{
		if (sum > 9999999999999990.00) return "";
		ostringstream strs;
		strs << fixed << sum;
		string ustr = strs.str();
		string newstr = "$";
		int i, j;
		for (i = 0; i < ustr.length() && (ustr[i] == '0' || ustr[i] == '.'); i++);
		if (i > 1 && ustr[i - 1] == '.') i -= 2;
		if (i == ustr.length()) return "$0,00";
		for (j = ustr.length() - 1; j >= 0 && ustr[j] != '.'; j--);
		j += 2;
	for (; i <= j; i++)
		{
			if (i != 0 && i < j - 2 && (j - i + 1) % 3 == 0) 
				newstr += '.';
			newstr += ustr[i] == '.' ? ',' : ustr[i];
		}
		return newstr;
	}
};

int main()
{
	cout<<"Task 11"<<endl;
	money mon;
	long double sum;
	char let;
	do
	{
		cout << "Введите long double: ";
		cin >> sum;
		cout << "Денежная сумма равна: " << mon.ldtoms(sum) << endl;
		cout << "Желаете продолжить(y/n)? ";
		cin >> let;
	} while (let == 'y');
	return 0;
}

