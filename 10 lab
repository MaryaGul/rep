#include <iostream> //2
#include <string>
using namespace std;

class publication
{
private:
	string title;
	float price;
public:
	virtual void vvod()
	{
		cout << "\nВведите название: "; cin >> title;
		cout << "Введите цену: "; cin >> price;
	}
	virtual void vivod()
	{
		cout << "\n\nНазвание: " << title;
		cout << "\nЦена: " << price;
	}
};

class book : public publication
{
private:
	int pages;
public:
	void vvod()
	{
		publication::vvod();
		cout << "Введите количество страниц: "; cin >> pages;
	}
	void vivod()
	{
		publication::vivod();
		cout << "\nСтраницы: " << pages;
	}
};
class tape : public publication
{
private:
	float timee;
public:
	void vvod()
	{
		publication::vvod();
		cout << "Введите время проигрывания: "; cin >> timee;
	}
	void vivod()
	{
		publication::vivod();
		cout << "\nВремя проигрывания: " << timee;
	}
};

int main() 
{
    cout<<"Task 2"<<endl;
	publication* pubarr[100];          
	int n = 0;                         
	char choice;                       

	do {
		cout << "Введите данные для книги или ленты (b/t)? ";
		cin >> choice;
		if (choice == 'b')               
			pubarr[n] = new book;        
		else                            
			pubarr[n] = new tape;       
		pubarr[n++]->vvod();         
		cout << "   Введёте другую (y/n)? ";  
		cin >> choice;
	} while (choice == 'y');              

	for (int j = 0; j < n; j++)             
		pubarr[j]->vivod();           
	cout << endl;
	return 0;
}

#include <iostream>//3
using namespace std;

class Distance                    
{
private:
	int feet;
	float inches;
public:
	Distance()                  
	{
		feet = 0; inches = 0.0;
	}
	Distance(float fltfeet)     
	{                       
		feet = static_cast<int>(fltfeet);
		inches = 12 * (fltfeet - feet);  
	}                        
	Distance(int ft, float in) : feet(ft), inches(in)
	{  }
	void showdist()             
	{
		cout << feet << "\'-" << inches << '\"';
	}
	friend Distance operator * (Distance, Distance); 
};

Distance operator * (Distance d1, Distance d2)
{
	float fltfeet1 = d1.feet + d1.inches / 12;  
	float fltfeet2 = d2.feet + d2.inches / 12;
	float multfeet = fltfeet1 * fltfeet2;     
	return Distance(multfeet);     
}

int main() 
{
    cout<<"Task 3"<<endl;
	Distance dist1(3, 6.0);        
	Distance dist2(2, 3.1);
	Distance dist3;

	dist3 = dist1 * dist2;         

	dist3 = 10.0 * dist3;          
	cout << "dist1 = "; dist1.showdist();
	cout << "\ndist2 = "; dist2.showdist();
	cout << "\ndist3 = "; dist3.showdist();
	cout << endl;
}
#include <iostream> //4
using namespace std;

class Array                    
{
private:
	int* ptr;                 
	int size;                 
public:
	Array(int s)              
	{
		size = s;             
		ptr = new int[s];      
	}
	Array(const Array &arr)
	{
		size = arr.size;
		ptr = new int[size];
		for (int i = 0; i < size; i++)
			*(ptr + i) = *(arr.ptr + i);
	}
	~Array()                 
	{
		delete[] ptr;
	}
	int& operator [] (int j)  
	{
		return *(ptr + j);
	}
	Array& operator = (const Array &arr)
	{
		*this = Array(arr);
		return *this;
	}
};
int main() 
{
    cout<<"Task 4"<<endl;
	const int ASIZE = 10;
	Array arr1(ASIZE);
	for (int j = 0; j < ASIZE; j++)
		arr1[j] = j * j;
	Array arr2(arr1);
	arr2[0] = 1;	
	Array arr3 = arr1;
	arr3[0] = 2;	
	for (int j = 0; j < ASIZE; j++)
		cout << arr1[j] << ' ';
	cout << endl;	
	for (int j = 0; j < ASIZE; j++)
		cout << arr2[j] << ' ';
	cout << endl;
	for (int j = 0; j < ASIZE; j++)
		cout << arr3[j] << ' ';
	cout << endl;
}
#include <iostream> //5
#include <string>
using namespace std;

class publication
{
private:
	string title;
	float price;
public:
	virtual void vvod()
	{
		cout << "\nВведите название: "; cin >> title;
		cout << "Введите цену: "; cin >> price;
	}
	virtual void vivod()
	{
		cout << "\n\nНазвание: " << title;
		cout << "\nЦена: " << price;
	}
	virtual bool isOveersize()
	{
		return false;
	}
};
class book : public publication
{
private:
	int pages;
public:
	void vvod()
	{
		publication::vvod();
		cout << "Введите кол-во страниц: "; cin >> pages;
	}
	void vivod()
	{
		publication::vivod(); cout << "\nСтраницы: " << pages;
	}
	bool isOveersize()
	{
		return pages > 800;
	}
};
class tape : public publication
{
private:
	float timee;
public:
	void vvod()
	{
		publication::vvod();
		cout << "Введите время проигрывания: "; cin >> timee;
	}
	void vivod()
	{
		publication::vivod(); cout << "\nВремя проигрывания: " << timee;
	}
	bool isOveersize()
	{
		return timee > 90;
	}
};
int main() 
{
    cout<<"Task 5"<<endl;
	publication* pubarr[100];          
	int n = 0;                         
	char choice;                       
	do {
		cout << "\nВведите тип(книга или лента) (b/t)? "; cin >> choice;
		if (choice == 'b') pubarr[n] = new book;
		else  pubarr[n] = new tape;       
		do {
			pubarr[n]->vvod();
			if (pubarr[n]->isOveersize())
				cout << "Переполненно!\n";
			else break;
		} while (true);
		n++;
		cout << "   Введите еще другую (y/n)? ";  
		cin >> choice;
	} while (choice == 'y');              

	for (int j = 0; j < n; j++)            
		pubarr[j]->vivod();          
	cout << endl;
	return 0;
}
