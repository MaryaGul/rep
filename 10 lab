#include <iostream> //2
#include <string>
using namespace std;

class publication
{
private:
	string title;
	float price;
public:
	virtual void vvod()
	{
		cout << "\nВведите название: "; cin >> title;
		cout << "Введите цену: "; cin >> price;
	}
	virtual void vivod()
	{
		cout << "\n\nНазвание: " << title;
		cout << "\nЦена: " << price;
	}
};

class book : public publication
{
private:
	int pages;
public:
	void vvod()
	{
		publication::vvod();
		cout << "Введите количество страниц: "; cin >> pages;
	}
	void vivod()
	{
		publication::vivod();
		cout << "\nСтраницы: " << pages;
	}
};
class tape : public publication
{
private:
	float timee;
public:
	void vvod()
	{
		publication::vvod();
		cout << "Введите время проигрывания: "; cin >> timee;
	}
	void vivod()
	{
		publication::vivod();
		cout << "\nВремя проигрывания: " << timee;
	}
};

int main() 
{
    cout<<"Task 2"<<endl;
	publication* pubarr[100];          
	int n = 0;                         
	char choice;                       

	do {
		cout << "Введите данные для книги или ленты (b/t)? ";
		cin >> choice;
		if (choice == 'b')               
			pubarr[n] = new book;        
		else                            
			pubarr[n] = new tape;       
		pubarr[n++]->vvod();         
		cout << "   Введёте другую (y/n)? ";  
		cin >> choice;
	} while (choice == 'y');              

	for (int j = 0; j < n; j++)             
		pubarr[j]->vivod();           
	cout << endl;
	return 0;
}

#include <iostream>//3
using namespace std;

class Distance                    
{
private:
	int feet;
	float inches;
public:
	Distance()                  
	{
		feet = 0; inches = 0.0;
	}
	Distance(float fltfeet)     
	{                       
		feet = static_cast<int>(fltfeet);
		inches = 12 * (fltfeet - feet);  
	}                        
	Distance(int ft, float in) : feet(ft), inches(in)
	{  }
	void showdist()             
	{
		cout << feet << "\'-" << inches << '\"';
	}
	friend Distance operator * (Distance, Distance); 
};

Distance operator * (Distance d1, Distance d2)
{
	float fltfeet1 = d1.feet + d1.inches / 12;  
	float fltfeet2 = d2.feet + d2.inches / 12;
	float multfeet = fltfeet1 * fltfeet2;     
	return Distance(multfeet);     
}

int main() 
{
    cout<<"Task 3"<<endl;
	Distance dist1(3, 6.0);        
	Distance dist2(2, 3.1);
	Distance dist3;

	dist3 = dist1 * dist2;         

	dist3 = 10.0 * dist3;          
	cout << "dist1 = "; dist1.showdist();
	cout << "\ndist2 = "; dist2.showdist();
	cout << "\ndist3 = "; dist3.showdist();
	cout << endl;
}
#include <iostream> //4
using namespace std;

class Array                    
{
private:
	int* ptr;                 
	int size;                 
public:
	Array(int s)              
	{
		size = s;             
		ptr = new int[s];      
	}
	Array(const Array &arr)
	{
		size = arr.size;
		ptr = new int[size];
		for (int i = 0; i < size; i++)
			*(ptr + i) = *(arr.ptr + i);
	}
	~Array()                 
	{
		delete[] ptr;
	}
	int& operator [] (int j)  
	{
		return *(ptr + j);
	}
	Array& operator = (const Array &arr)
	{
		*this = Array(arr);
		return *this;
	}
};
int main() 
{
    cout<<"Task 4"<<endl;
	const int ASIZE = 10;
	Array arr1(ASIZE);
	for (int j = 0; j < ASIZE; j++)
		arr1[j] = j * j;
	Array arr2(arr1);
	arr2[0] = 1;	
	Array arr3 = arr1;
	arr3[0] = 2;	
	for (int j = 0; j < ASIZE; j++)
		cout << arr1[j] << ' ';
	cout << endl;	
	for (int j = 0; j < ASIZE; j++)
		cout << arr2[j] << ' ';
	cout << endl;
	for (int j = 0; j < ASIZE; j++)
		cout << arr3[j] << ' ';
	cout << endl;
}
#include <iostream> //5
#include <string>
using namespace std;

class publication
{
private:
	string title;
	float price;
public:
	virtual void vvod()
	{
		cout << "\nВведите название: "; cin >> title;
		cout << "Введите цену: "; cin >> price;
	}
	virtual void vivod()
	{
		cout << "\n\nНазвание: " << title;
		cout << "\nЦена: " << price;
	}
	virtual bool isOveersize()
	{
		return false;
	}
};
class book : public publication
{
private:
	int pages;
public:
	void vvod()
	{
		publication::vvod();
		cout << "Введите кол-во страниц: "; cin >> pages;
	}
	void vivod()
	{
		publication::vivod(); cout << "\nСтраницы: " << pages;
	}
	bool isOveersize()
	{
		return pages > 800;
	}
};
class tape : public publication
{
private:
	float timee;
public:
	void vvod()
	{
		publication::vvod();
		cout << "Введите время проигрывания: "; cin >> timee;
	}
	void vivod()
	{
		publication::vivod(); cout << "\nВремя проигрывания: " << timee;
	}
	bool isOveersize()
	{
		return timee > 90;
	}
};
int main() 
{
    cout<<"Task 5"<<endl;
	publication* pubarr[100];          
	int n = 0;                         
	char choice;                       
	do {
		cout << "\nВведите тип(книга или лента) (b/t)? "; cin >> choice;
		if (choice == 'b') pubarr[n] = new book;
		else  pubarr[n] = new tape;       
		do {
			pubarr[n]->vvod();
			if (pubarr[n]->isOveersize())
				cout << "Переполненно!\n";
			else break;
		} while (true);
		n++;
		cout << "   Введите еще другую (y/n)? ";  
		cin >> choice;
	} while (choice == 'y');              

	for (int j = 0; j < n; j++)            
		pubarr[j]->vivod();          
	cout << endl;
	return 0;
}
#include <iostream> //6
#include <string>
#include <sstream>
using namespace std;

class money
{
private:
	long double _sum;
public:
	money() {}
	explicit money(long double sum) : _sum(sum) {}
	long double mstold(string sum)
	{
		string res = "";
		for (int i = 0; i < sum.length(); i++)
		{
			if (isdigit(sum[i]) || sum[i] == ',')
				res += sum[i];
		}
		return stold(res.c_str());
	}
string ldtoms(long double sum)
	{
		if (sum > 9999999999999990.00) return "";
		ostringstream strs;
		strs << fixed << sum;
		string ustr = strs.str();
		string newstr = "$";
		int i, j;
		for (i = 0; i < ustr.length() && (ustr[i] == '0' || ustr[i] == '.'); i++);
		if (i > 1 && ustr[i - 1] == '.') i -= 2;
		if (i == ustr.length()) return "$0,00";
		for (j = ustr.length() - 1; j >= 0 && ustr[j] != '.'; j--);
		j += 2;
		for (; i <= j; i++)
		{
			if (i != 0 && i < j - 2 && (j - i + 1) % 3 == 0) newstr += '.';
			newstr += ustr[i] == '.' ? ',' : ustr[i];
		}
		return newstr;
	}
	void vvodmoney()
	{
		string str;
		cout << "Введите сумму в долларах:\n"; cin >> str;
		_sum = mstold(str);
	}
	void vivodmoney()
	{
		cout << "Сумма денег: " << ldtoms(_sum) << endl;
	}
	money operator+(money m)
	{
		return money(_sum + m._sum);
	}
	money operator-(money m)
	{
		return money(_sum - m._sum);
	}
	money operator*(long double ld)
	{
		return money(_sum * ld);
	}
	long double operator/(money m)
	{
		return _sum / m._sum;
	}
	money operator/(long double ld)
	{
		return money(_sum / ld);
	}
	friend money operator * (long double ld, money m);
	friend money operator / (long double ld, money m);
};
money operator * (long double ld, money m)
{
	return money(m._sum * ld);
}
money operator / (long double ld, money m)
{
	return money(ld / m._sum);
}
int main() 
{
	cout<<"Task 6"<<endl;
	money m1, m2;
	long double s;
	char ch;
	do
	{
		m1.vvodmoney();
		m2.vvodmoney();
		cout << "Введите double: "; cin >> s;
		cout << "m1 + m2: ";
		(m1 + m2).vivodmoney();
		cout << "m1 - m2: ";
		(m1 - m2).vivodmoney();
		cout << "m1 * s: ";
		(m1 * s).vivodmoney();
		cout << "m1 / m2: ";
		cout << (m1 / m2) << endl;
		cout << "m1 / s: ";
		(m1 / s).vivodmoney();
		cout << "s * m1: ";
		(s * m1).vivodmoney();
		cout << "s / m1: ";
		(s / m1).vivodmoney();
		cout << "Повторить (y/n)? ";
		cin >> ch;
	} while (ch != 'n');
	return 0;
}

#include <iostream>//7
#include <string>
#include <sstream>
#include <cmath>
using namespace std;
class money
{
private:
	long double _sum;
public:
	money() {}
	explicit money(long double sum) : _sum(sum) {}
	long double mstold(string sum)
	{
		string res = "";
		for (int i = 0; i < sum.length(); i++)
		{
			if (isdigit(sum[i]) || sum[i] == ',')
				res += sum[i];
		}
		return stold(res.c_str());
	}
	string ldtoms(long double sum)
	{
		if (sum > 9999999999999990.00) return "";
		ostringstream strs;
		strs << fixed << sum;
		string ustr = strs.str();
		string newstr = "$";
		int i, j;
		for (i = 0; i < ustr.length() && (ustr[i] == '0' || ustr[i] == '.'); i++);
		if (i > 1 && ustr[i - 1] == '.') i -= 2;
		if (i == ustr.length()) return "$0,00";
		for (j = ustr.length() - 1; j >= 0 && ustr[j] != '.'; j--);
		j += 2;

		for (; i <= j; i++)
		{
			if (i != 0 && i < j - 2 && (j - i + 1) % 3 == 0)
				newstr += '.';
			newstr += ustr[i] == '.' ? ',' : ustr[i];
		}
		return newstr;
	}

	void vvodmoney()
	{
		string str;
		cout << "Введите сумму в долларах:\n";
		cin >> str;
		_sum = mstold(str);
	}
	void vivodmoney()
	{
		cout << "Сумма денег: " << ldtoms(_sum) << endl;
	}
	friend money round(money m);
};
money round(money m)
{
	long double temp = m._sum;
	return money(modfl(m._sum, &temp) >= 0.5 ? temp + 1 : temp);
}
int main() 
{
	cout<<"Task 7"<<endl;
	money m;
	char ch;
	do
	{
		m.vvodmoney();
		round(m).vivodmoney();
		cout << "Повторить (y/n)? ";
		cin >> ch;
	} while (ch != 'n');
	return 0;
}

#include <iostream> //8
#include <cstring>
#include <string>
using namespace std;

const int LIMIT = 100;
const int MAX = 100;
class Token {
public:
	virtual float vvodNam() = 0;
	virtual char vvodOper() = 0;
};
class Operand : public Token {
private:
	char _oper;
public:
	Operand(char oper) : _oper(oper) {}
	char vvodOper()
	{
		return _oper;
	}
	float vvodNam()
	{
		return 0;
	}
};
class Number : public Token {
private:
	float _fnum;
public:
	Number(float fnum) : _fnum(fnum) {}
	float vvodNam()
	{
		return _fnum;
	}
	char vvodOper()
	{
		return 0;
	}
};
class Stack
{
private:
	Token *_arr[LIMIT];
	int _next;
public:
	Stack() : _next(0) {}
	void push(Token *el)
	{
		if (_next == LIMIT)
		{
			cout << "\nПереполнение стека\n";
			return;
		}
		_arr[_next++] = el;
	}
	Token* pop()
	{
		if (_next == 0)
		{
			cout << "\nСтек пуст\n"; exit(0);
		}
		return _arr[--_next];
	}
	int count()
	{
		return _next;
	}
};
class express
{
private:
	Stack s;
	char* pStr;
	int len;
public:
	express(char* ptr)
	{
		pStr = ptr;
		len = strlen(pStr);
	}
	float operation(float f1, float f2, char op)
	{
		switch (op)
		{
		case '+': return f1 + f2; break;
		case '-': return f1 - f2; break;
		case '*': return f1 * f2; break;
		case '/': return f1 / f2; break;
		default: cout << "\nНеизвестный операнд" << op; exit(1);
		}
	}
	bool isOperand(char ch)
	{
		return  ch == '+' || ch == '-' || ch == '*' || ch == '/';
	}
	void parse()
	{
		char lastop, temp[MAX];
		float lastval, secval, buf;
		int k, j;
		for (j = 0, k = 0; j < len; j++)
		{
			if (isdigit(pStr[j]) || pStr[j] == ',')
			{
				temp[k++] = pStr[j];
			}
			else
			{
				temp[k] = '\0';
				k = 0;
				buf = stof(temp);
				s.push(new Number(buf));

				if (!isOperand(pStr[j]))
				{
					cout << "\nНеизвестный символ";
					exit(1);
				}
				if (s.count() == 1)
					s.push(new Operand(pStr[j]));
				else
				{
					lastval = s.pop()->vvodNam();
					lastop = s.pop()->vvodOper();
					if ((pStr[j] == '*' || pStr[j] == '/') && (lastop == '+' || lastop == '-'))
					{
						s.push(new Operand(lastop));
						s.push(new Number(lastval));
					}
else
					{
						secval = s.pop()->vvodNam();
						s.push(new Number(operation(secval, lastval, lastop)));
					}
					s.push(new Operand(pStr[j]));
				}
			}
		}
		temp[k] = '\0';
		buf = stof(temp);
		s.push(new Number(buf));
	}
	float solve()
	{
		float lastval, secval;
		char oper, oper2;
		while (s.count() > 2)
		{
			lastval = s.pop()->vvodNam();
			oper = s.pop()->vvodOper();
			secval = s.pop()->vvodNam();
			if (s.count() != 0)
			{
				oper2 = s.pop()->vvodOper();
				if (oper2 == '-')
				{
					secval *= -1;
					oper2 = '+';
				}
				s.push(new Operand(oper2));
			}
			s.push(new Number(operation(secval, lastval, oper)));
		}
		return s.pop()->vvodNam();
	}
};
int main() 
{
	cout<<"Task 8"<<endl;
	char ans;
	char string[MAX];
	cout << "\nВведите арифметическое выражение в виде 3+2*5/3-2."
		"\nНе используйте пробелы или скобки";
	do
	{
		cout << "\nВыражение: "; cin >> string;
		express* eptr = new express(string);
		eptr->parse();
		cout << "\nРезультат: "
			<< eptr->solve();
		delete eptr;
		cout << "\nПовторить (y/n)? ";
		cin >> ans;
	} while (ans == 'y');
}


#include <iostream>//10
using namespace std;

struct link                           
{
	int data;                          
	link* next;                        
};
class linklist                        
{
private:
	link* first;                    
public:
	linklist()                      
	{
		first = NULL;
	}
	linklist(const linklist &list)                      
	{
		if (list.first == NULL) return;
		first = new link();
		first->data = list.first->data;
		link *cur1 = first;
		link *cur2 = list.first;				
		while (cur2->next != NULL)
		{
			cur2 = cur2->next;
			cur1->next = new link();
			cur1 = cur1->next;
			cur1->data = cur2->data;
		} 
	}
	linklist& operator=(const linklist &list)
	{
		*this = linklist(list);
		return *this;
	}

	~linklist();                    
	void additem(int d);            
	void display();                 
};
void linklist::additem(int d)        
{
	link* newlink = new link;          
	newlink->data = d;                 
	newlink->next = first;             
	first = newlink;                   
}
void linklist::display()              
{
	link* current = first;             
	while (current != NULL)           
	{
		cout << " " << current->data;  
		current = current->next;        
	}
}
linklist::~linklist()                 
{
	link* current = first;             
	cout << "\nУдаление списка!\n";
	while (current != NULL)           
	{
		link* temp = current;           
		current = current->next;        
		cout << temp->data << " ";
		delete temp;                    
	}
}
int main() 
{
	cout<<"Task 10"<<endl;
	linklist *li = new linklist();       
	cout << "\nНовый список:\n";
	li->additem(16);    
	li->additem(25);
	li->additem(36);
	li->additem(49);
	li->display();      
	linklist copy = *li;
	delete li;
	cout << "\nПроверка копии списка:\n";
	copy.display();
	cout << endl;
}


