#include<iostream>//4
#include <string>
using namespace std;

class publication
{
private:
 string name;
 float price;
public:
 void vvod()
 {
  cout<<"Введите название книги: ";
  cin>>name;
  cout<<"Введите цену книги: ";
  cin>>price;
 }
 void vivod()
 {
  cout<<"Название книги: "<<name <<endl;
  cout<<"Цена книги: "<<price<<endl;
 }
};

const int month = 3;

class sales
{
private:
 float sales [month];
public:
 void vvod()
 {
  for (int j = 1; j <= month; j++)
  {
  cout << "Введите продажи книг за  " << j << " месяца: ";
  cin >> sales[j];
  }
 }
 void vivod()
 {
  for (int j = 1; j <= month; j++)
  {
  cout << "Продажи за " << j << " месяца: ";
  cout << sales[j]<<endl;
  }
 }
};

class disk : private sales, private publication
{
private:
 enum etype {CD, DVD};
public:
 void vvod()
 {
  etype diskt;
  char type;
  publication::vvod();
  cout << "Какой тип диска? (c/d): ";
  cin >> type;
  if (type = 'c')
   diskt = CD;
  else diskt = DVD;

  sales::vvod();
 }
 void vivod()
 {
  publication::vivod();
  etype diskt;
  char type;
  cout << "Тип диска: ";
  if (diskt = CD)
   cout << "CD"<<endl;
  else
   cout << "DVD"<<endl;
  sales::vivod();
 }
};

int main()
{
    cout<<"Task 4"<<endl;
	disk b;
	b.vvod();
	cout << endl;
	b.vivod();
	cout << endl;
	return 0;
}

#include <iostream>//5
using namespace std;

const int LEN = 80;

class employee
{
private:
	char name[LEN];
	unsigned long number;
public:
	void vvod()
	{
		cout << "Введите фамилию сотрудника: "; cin >> name;
		cout << "Введите номер сотрудника: ";      cin >> number;
	}
	void vivod() 
	{
		cout << "Фамилия сотрудника: " << name<<endl;
		cout << "Его номер: " << number<<endl;
	}
};

class employee2 : private employee
{
private:
	double compensation;
	enum payperiod { Hourly, Weekly, Monthly } period;
public:
void vvod()
	{
		employee::vvod();
		cout << "Введите оплату: ";
		cin >> compensation;
		char let;
		cout << "Введите период оплаты работы сотрудника(h/w/m): "; 
		cin >> let;
		switch (let)
		{
		case 'h': period = Hourly; break;
		case 'w': period = Weekly; break;
		case 'm': period = Monthly; break;
		default: cout << "Такой оплаты нет!"; break;
		}

	}
	void vivod()
	{
		employee::vivod();
		cout << "Оплата: "; cout << compensation<<endl;
		cout << "Период оплаты: ";
		switch (period)
		{
		case Hourly: cout << "Почасовая"; break;
		case Weekly: cout << "Понедельная"; break;
		case Monthly: cout << "Помесячная"; break;
		default: cout << "Такой оплаты нет!"; break;
		}
	}

};

int main()
{
    cout<<"Task 5"<<endl;
	employee2 emp;
	emp.vvod();
	cout<<endl;
	emp.vivod();
	cout << endl;
	return 0;
}


#include <iostream>//6
using namespace std;

const int LIMIT = 100;

class safearay
{
private:
	int arr[LIMIT];
public:
	int& operator[](int n)
	{
		if (n < 0 || n >= LIMIT)
		{
			cout << "Индекс не входит в пределы"; exit(1);
		}
		return arr[n];
	}
};

class custarray : public safearay
{
private:
	int lborder;
	int uborder;
public:
	custarray(int lowborder, int upperborder) : lborder(lowborder), uborder(upperborder)
	{
	}
	int& operator[](int n)
	{
		return safearay::operator[](n >= uborder ? LIMIT : n - lborder);
	}
};


int main()
{
    cout<<"Task 6"<<endl;
	custarray arr(100, 110);
	for (int i = 100; i < 110; i++)
		arr[i] = i * 10;
	for (int i = 100; i <= 110; i++)
		cout << "array[" << i << "] = " << arr[i] << endl;
	return 0;
}

#include <iostream>//7
using namespace std;

class Counter
{
protected:
	unsigned int count; 
public:
	Counter() : count(0)
	{}
	Counter(int c) : count(c)
	{}
	unsigned int vvod_count() const
	{
		return count;
	}
	Counter operator++()
	{
		return Counter(++count);
	}
};

class CountDn : public Counter
{
public:
	CountDn() : Counter()
	{ }
	CountDn(int c) : Counter(c)
	{ }
	CountDn operator--()
	{
		return CountDn(--count);
	}
};

class CountPost : public CountDn
{
public:
	CountPost() : CountDn()
	{ }
	CountPost(int c) : CountDn(c)
	{ }
	CountPost operator++(int) 
	{
		CountPost temp = *this;
		++count;
		return temp;
	}
	CountPost operator--(int)
	{
		CountPost temp = *this;
		--count;
		return temp;
	}
};

int main()
{
	CountPost c1;
	CountPost c2(50);
    cout<<"Task 7"<<endl;
	cout << "c1   = " << c1.vvod_count()<<endl;
	cout << "c2   = " << c2.vvod_count()<<endl;
	cout << "c1++ = " << c1++.vvod_count()<<endl;
	cout << "c2-- = " << c2--.vvod_count()<<endl;
	cout << "c1   = " << c1.vvod_count()<<endl;
	cout << "c2   = " << c2.vvod_count()<<endl;
	cout << endl;
	return 0;
}

#include <iostream>//9
#include <string>
using namespace std;

class publication                     
{
private:
	string title;
	float price;
public:
	void vvod()
	{
		cout << "Введите название: "; cin >> title;
		cout << "Введите цену: "; cin >> price;
	}
	void vivod() 
	{
		cout << "Название: " << title<<endl;
		cout << "Цена: " << price<<endl;
	}
};

class publication2 : public publication
{
private:
	string date;
public:
	void vvod()
	{
		publication::vvod();
		cout << "Введите дату: "; cin >> date;
	}
	void vivod() 
	{
		publication::vivod();
		cout << "Дата: " << date<<endl;
	}
};
class book : private publication2    
{
private:
	int pages;
public:
	void vvod()
	{
		publication2::vvod();
		cout << "Введите номер страницы: "; cin >> pages;
	}
	void vivod() 
	{
		publication2::vivod();
		cout << "Старницы: " << pages<<endl;
	}
};
class tape : private publication2     
{
private:
	float timee;
public:
	void vvod()
	{
		publication2::vvod();
		cout << "Введите время записи книги: "; cin >> timee;
	}
	void vivod() 
	{
		publication2::vivod();
		cout << "Время записи книги: " << timee<<endl;
	}
};

int main()
{
	book b;                        
	tape t;
    cout<<"Task 9"<<endl;
	b.vvod(); 
	cout<<endl;
	t.vvod();
    cout<<endl;
	b.vivod();      
	cout<<endl;
	t.vivod();
	cout << endl;
	return 0;
}

#include <iostream>//10
using namespace std;
const int LEN = 80;       

class student             
{
private:
 char school[LEN];     
 char degree[LEN];     
public:
 void vvodedu()
 {
  cout << "Введите название учебного заведения: ";
  cin >> school;
  cout << "Введите степень высшего образования"<<endl;
  cout << "неполное высшее, бакалавр, магистр, кандидат наук): ";
  cin >> degree;
 }
 void vivodedu() const
 {
  cout << "Учебное заведение: " << school<<endl;
  cout << "Степень: " << degree<<endl;
 }
};

class employee            
{
private:
 char name[LEN];       
 unsigned long number; 
public:
 void vvod()
 {
  cout << "Введите фамилию: "; cin >> name;
  cout << "Введите номер: ";     cin >> number;
 }
 void vivod() const
 {
  cout << "Фамилия: " << name<<endl;
  cout << "Номер: " << number<<endl;
 }
};

class manager : private employee, private student 
{
private:
 char title[LEN];     
 double  dues;         
public:
 void vvod()
 {
  employee::vvod();
  cout << "Введите должность: "; cin >> title;
  cout << "Введите сумму взносов в гольф-клуб: "; cin >> dues;
  student::vvodedu();
 }
 void vivod() const
 {
  employee::vivod();
  cout << "Должность: " << title<<endl;
  cout << "Сумма взносов в гольф-клуб: " << dues<<endl;
  student::vivodedu();
 }
};

class executive : public manager
{
private:
 float premium;
 int stock;
public:
 void vvod()
 {
  manager::vvod();
  cout << "Введите премию: "; cin >> premium;
  cout << "Введите количество акций: "; cin >> stock;
 }
 void vivod()const
 {
  manager::vivod();
  cout << "Премия: " << premium;
  cout << "Количество акций: " << stock<<endl;
 }
};

class scientist : private employee, private student 
{
private:
 int pubs;           
public:
 void vvod()
 {
  employee::vvod();
  cout << "Введите количество публикаций: "; cin >> pubs;
  student::vvodedu();
 }
 void vivod() const
 {
  employee::vivod();
  cout << "Количество публикаций: " << pubs<<endl;
  student::vivodedu();
 }
};

class laborer : public employee 
{
};

int main()
{
    cout<<"Task 10"<<endl;
    executive e;
	cout << endl;
	cout << "Введите информацию"<<endl;
	e.vvod();
	cout<<endl;
	e.vivod();
	cout << endl;

     return 0;
}

