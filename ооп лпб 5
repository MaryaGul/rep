#include <iostream>//4
using namespace std;

class employee {
public:

   int number; 
   float salary;
};

int main()
{
    cout<<"Task 4"<<endl;
    employee empl1, empl2, empl3;
    cout<<"Введите данные о трёх сотрудниках, ";
    cout<<"введите номер первого сотрудника сотрудника: "<<endl;
    cin>>empl1.number;
    while (empl1.number <= 0){
        cout<<"Ошибка, номер сотрудника должен быть положительным! Повторите попытку еще раз!"<<endl;
        cin>>empl1.number;
    }   
    cout<<"Введите величину его оклада: ";
    cin>>empl1.salary;
    while (empl1.salary < 0){
        cout<<"Ошибка, пособие сотрудника должно быть положительным! Повторите попытку еще раз!"<<endl;
        cin>>empl1.salary;
    }
    cout<<endl;
    cout<<"Введите номер второго сотрудника: "<<endl;
    cin>>empl2.number;
    while (empl2.number <= 0){
        cout<<"Ошибка, номер сотрудника должен быть положительным! Повторите попытку еще раз!"<<endl;
        cin>>empl2.number;
    }   
    cout<<"Введите величину его оклада: ";
    cin>>empl2.salary;
    while (empl2.salary < 0){
        cout<<"Ошибка, пособие сотрудника должно быть положительным! Повторите попытку еще раз!"<<endl;
        cin>>empl2.salary;
    }
    cout<<endl;
    cout<<"Введите номер третьего сотрудника: "<<endl;
    cin>>empl3.number;
    while (empl3.number <= 0){
        cout<<"Ошибка, номер сотрудника должен быть положительным! Повторите попытку еще раз!"<<endl;
        cin>>empl3.number;
    }   
    cout<<"Введите величину его оклада: ";
    cin>>empl3.salary;
    while (empl3.salary < 0){
        cout<<"Ошибка, пособие сотрудника должно быть положительным! Повторите попытку еще раз!"<<endl;
        cin>>empl3.salary;
    }
    cout<<endl;
    cout<<"Номер первого сотрудника: "<<empl1.number<<", его оклад: "<<empl1.salary<<" $"<<endl;
    cout<<"Номер второго сотрудника: "<<empl2.number<<", его оклад: "<<empl2.salary<<" $"<<endl;
    cout<<"Номер третьего сотрудника: "<<empl3.number<<", его оклад: "<<empl3.salary<<" $"<<endl;
    
    return 0;
}


#include <iostream>//5
using namespace std;

class date {
public:    
   int month, day, year; 
   
   void getdate(){
    char simb;   
    cin>>day>>simb>>month>>simb>>year;
    while (day <= 0 or month <= 0 or year <= 0 or day>31 or month>12  ){
        if (day <= 0 or month <= 0 or year <=0) cout<<"Ошибка, значения должны быть положительным! Повторите попытку еще раз!"<<endl;
        if (day>31 or month>12)  cout<<"Ошибка, значения дня и месяца должны быть существующими! Повторите попытку еще раз!"<<endl;
        cin>>day>>simb>>month>>simb>>year;
    }   
   }
    
   void showdate(){
    char simb = '/';  
    cout<<"Эта дата: "<<day<<simb<<month<<simb<<year<<endl; 
       
   }

};

int main()
{
    cout<<"Task 5"<<endl;
    date date55;
    char simb;
    cout<<"Введите день, месяц и год (в формате 31/12/2002): ";
    date55.getdate();
    cout<<endl;
    date55.showdate();
   
    
    return 0;
}


#include <iostream>
using namespace std;

   class date {
private:    
   int month, day, year; 
public:   
   void getdate(){
    char simb;   
    cin>>day>>simb>>month>>simb>>year;
    while (day <= 0 or month <= 0 or year <= 0 or day>31 or month>12  ){
        if (day <= 0 or month <= 0 or year <=0) cout<<"Ошибка, значения должны быть положительным! Повторите попытку еще раз!"<<endl;
        if (day>31 or month>12)  cout<<"Ошибка, значения дня и месяца должны быть существующими! Повторите попытку еще раз!"<<endl;
        cin>>day>>simb>>month>>simb>>year;
    }   
   }
    
   void showdate(){
    char simb = '/';  
    cout<<"дата устройства на работу: "<<day<<simb<<month<<simb<<year<<endl; 
       
   }
};

//6
class employee {
private:

   int number; 
   float salary;
   
   enum etype {  laborer, secretary, manager, accountant, executive, researcher };
   


public:   
   void getemploy(){
    etype position;   
    char simb;   
    cin>>number;
    char lett;
    while (number <= 0){
        cout<<"Ошибка, номер сотрудника должен быть положительным! Повторите попытку еще раз!"<<endl;
        cin>>number;
    }   
    cout<<"Введите величину его зарплаты: ";
    cin>>salary;
    while (salary <= 0){
        cout<<"Ошибка, зарплата сотрудника должна быть положительной! Повторите попытку еще раз!"<<endl;
        cin>>salary;
    }
    cout<<"Введите первую букву должности(laborer, secretary, manager, accountant, executive, researcher): ";
    cin>>lett;
    switch(lett){
        case('l'): position = laborer; break;
        case('s'): position = secretary; break;
        case('m'): position = manager; break;
        case('a'): position = accountant; break;
        case('e'): position = executive; break;
        case('r'): position = researcher;  break;
        default: cout<<"Такой буквы нет!"<<endl; break;
    }
    
   } 
   
   
   void putemploy(){
    char simb = '/'; 
    etype position;
    cout<<"Номер сотрудника: "<<number<<", его зарплата равно: "<<salary<<" $"<<endl;
     switch(position){
        case 0: cout<<"Полное название должности: "<<"laborer"<<endl; break;
        case 1: cout<<"Полное название должности: "<<"secretary"<< endl; break;
        case 2: cout<<"Полное название должности: "<<"manager"<< endl; break;
        case 3: cout<<"Полное название должности: "<<"accountant"<< endl; break;
        case 4: cout<<"Полное название должности: "<<"executive"<< endl; break;
        case 5: cout<<"Полное название должности: "<<"researcher"<< endl; break;        
    }
     
       
   }
   
};





int main()
{
    cout<<"Task 6"<<endl;
    employee e1, e2, e3;
    date d1, d2, d3;
    cout<<"Введите данные о трёх сотрудниках, ";
    cout<<"Введите номер первого сотрудника сотрудника: ";
    e1.getemploy();
    cout<<"Введите его дату принятия на работу (день, месяц и год (в формате 31/12/2002)): ";
    d1.getdate();
    cout<<endl;
    
    
    cout<<"Введите номер второго сотрудника сотрудника: ";
    e2.getemploy();
    cout<<"Введите его дату принятия на работу (день, месяц и год (в формате 31/12/2002)): ";
    d2.getdate();
    cout<<endl;
    
    
    
    cout<<"Введите номер третьего сотрудника сотрудника: ";
    e3.getemploy();
    cout<<"Введите его дату принятия на работу (день, месяц и год (в формате 31/12/2002)): ";
    d3.getdate();
    cout<<endl;
    
    
    cout<<"Первый сотрудник: ";
    e1.putemploy();
    d1.showdate();
    cout<<endl;
    cout<<"Второй сотрудник: ";
    e2.putemploy();
    d2.showdate();
    cout<<endl;
    cout<<"Третий сотрудник: ";
    e3.putemploy();
    d3.showdate();
    return 0;
}


#include <iostream>//7
using namespace std;

class angle {
private:    
   int degrees;
   float minets;
   char direction;
public: 

    angle(int degrees7, float minets7, char direction7)  
	{
	    degrees = degrees7;
		minets = minets7;
		direction = direction7;
	}

   void vvod()
	{
		char simb;
		cin>>degrees>>simb>>minets>>simb>>direction;
	}
	
	void vivod()
	{
		char simb;
		cout<<degrees<<"°"<<simb<<minets<<"'"<<simb<<direction;
	}
    
   
};

int main()
{
    cout<<"Task 7"<<endl;
    char let, z;
	angle coordinat1 = angle(0, 0, 'W');
	angle coordinat2 = angle(0, 0, 'S');
	do {
		cout<<"Введите координаты точки: ";
		coordinat1.vvod();
		cin>>z;
		coordinat2.vvod();
		cout<<"Введеные координаты:" << endl;
		coordinat1.vivod();
		cout<<endl;
		coordinat2.vivod();
		cout<<endl;
		cout << "Хотите продолжить? (y/n) ";
		cin>>let;
	} while (let != 'n');
	return 0;
}


#include <iostream>//8
using namespace std;

class serialnum{

private:
	static int num;
	int ind;
public:

	serialnum(){
		ind=++num;
	}

	void vivod() {
		cout<<"Мой порядковый номер: "<<ind<<endl;
	}
};
int serialnum::num;
int main()
{
    cout<<"Task 8"<<endl;
	serialnum ob1, ob2, ob3;
	ob1.vivod();
	ob2.vivod();
	ob3.vivod();
	return 0;
}


#include<iostream>//9
using namespace std;

struct fraction {
    
   float nummerator, denominator; 
};
   
   
fraction fadd(fraction _d1, fraction _d2){
    cout<<"Результат равен: "<<_d1.nummerator*_d2.denominator + _d1.denominator*_d2.nummerator<<"/"<<_d1.denominator * _d2.denominator<<endl;
    return _d1;
}   


int main()
{
    fraction d1, d2;
    char let, dr;
    do {cout<<"Введите первый операнд(дробь): ";
    cin>>d1.nummerator>>dr>>d1.denominator;
    cout<<"Второй операнд(дробь): ";
    cin>>d2.nummerator>>dr>>d2.denominator;
    fadd(d1, d2);
    cout<<"Выполнить еще одну операцию (у/n)?"<<endl;
    cin>>let;
    } while(let != 'n');

    return 0;
}


#include <iostream>//10
using namespace std;

class angle
{
private:
	int degrees;
    float minets;
    char direction;
public:
	angle() {
	}
	angle(int degrees10, float minets10, char direction10) {
	    degrees = degrees10;
		minets = minets10;
		direction = direction10;
	}

	void vvod()
	{
		char simb;
		cin>>degrees>>simb>>minets>>simb>>direction;
	
	}

	void vivod()
	{
		cout<<degrees<<"°"<<minets<<"'"<<direction;
	}
};


class ship
{
private:
	static int num;
	int ind;
	angle shirota;
	angle dolgota;
public:
	ship()
	{
		ind = ++num;
	}
	
void vvod1()
	{
		char simb;
        shirota.vvod();
		cin>>simb;
		dolgota.vvod();
	}
	
void vivod1()
	{
		cout<<"Номер корабля: "<<ind<<endl;
		cout<<"Координаты: ";
		shirota.vivod();
		cout<<", ";
		dolgota.vivod();
		cout << endl;
	}
	
};

int ship::num;

int main()
{
	
	cout<<"Task 10"<<endl;
	ship sh1, sh2, sh3;
	cout<<"Введите координаты трёх короблей: "<<endl;
	sh1.vvod1();
	sh2.vvod1();
	sh3.vvod1();
	cout<<"Введеные данные о кораблях: "<<endl;
	sh1.vivod1();
	sh2.vivod1();
	sh3.vivod1();
		
	return 0;
}

#include<iostream>//11
#include<cmath>
using namespace std;

class fraction {
public:   
   int nummerator, denominator; 
   char simb;
public:   
   
void fadd(fraction d){
    nummerator = nummerator * d.denominator + denominator * d.nummerator;
	denominator = denominator * d.denominator;
	lowterms();

}   

void fsub(fraction d){
    nummerator = nummerator * d.denominator - denominator * d.nummerator;
	denominator = denominator * d.denominator;
	lowterms();
}   
     

void fmul(fraction d){
    nummerator = nummerator * d.nummerator;
	denominator = denominator * d.denominator;
	lowterms();
    
}   
  
void fdiv(fraction d){
    nummerator = nummerator * d.denominator;
	denominator = denominator * d.nummerator;
	lowterms();
}   

void vivod()
	{
		cout <<nummerator<<'/'<<denominator<< endl;
	}

void lowterms() //Сокращение дроби 

{ 

long tnum, tden, temp,gcd;    
tnum = labs(nummerator); 
tden = labs(denominator); // Нужен cmath 
if(tden == 0) { // Проверка знаменателя  
cout << "Недопустимый знаменатель";  exit(1); 

} else if(tnum == 0){  
    nummerator = 0; denominator = 1; 

 return; 

} 
// Нахождение наибольшего общего делителя   
while(tnum != 0) { 

if(tnum < tden) {   temp = tnum;    tnum = tden; 

 tden = temp;  } 

tnum = tnum - tden; 

} 
gcd = tden;// Делим числитель и знаменатель на НОД. 
nummerator = nummerator/gcd; 
denominator = denominator/gcd; 
}
};

int main()
{
    cout<<"Task 11"<<end;
    fraction d1, d2;
    char op, let, dr;
    do {cout<<"Введите первый операнд(дробь): ";
    cin>>d1.nummerator>>dr>>d1.denominator;
    cout<<"Oперацию: ";
    cin>>op;
    cout<<"Второй операнд(дробь): ";
    cin>>d2.nummerator>>dr>>d2.denominator;
    switch(op){
        case '+': d1.fadd(d2);
                break;
        case '-': d1.fsub(d2);
                break;
        case '*': d1.fmul(d2);
                break;
        case '/': d1.fdiv(d2);
                break;        
        default: cout<<"Такой операции нет"<<endl;        
    } 
    cout<<"Результат равен: ";
    d1.vivod();
    cout<<"Выполнить еще одну операцию (у/n)?"<<endl;
    cin>>let;
    } while(let != 'n');

    
    return 0;
}
